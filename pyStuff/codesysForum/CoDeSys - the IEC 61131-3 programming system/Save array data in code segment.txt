Hi all,
I'm trying to create constant arrays of bytes. If I use global variables and VAR_CONSTANT, it looks like:
code in ST:
VAR CONSTANT	auchCRChi_exp: ARRAY[0..255] OF BYTE:=   16#00, 16#C1, 16#81, 16#40, 16#01, 16#C0, 16#80, 16#41........................END_VAR

generated code:
;Line: 1	E7 F8 FF 00 	MOVB    RL4, #00FFh        	D7 00 8A 00 	EXTS    SEG(8Ah), #0001h           		F7 F8 00 80 	MOVB    [8004h], RL4               ;Line: 2	E7 F8 FF 00 	MOVB    RL4, #00FFh                		D7 00 8A 00 	EXTS    SEG(8Ah), #0001h           		F7 F8 01 80 	MOVB    [8005h], RL4               ;Line: 3	E1 08       	MOVB    RL4, #0000h                		D7 00 8A 00 	EXTS    SEG(8Ah), #0001h           		F7 F8 04 80 	MOVB    [8006h], RL4               ;Line: 4	E7 F8 C1 00 	MOVB    RL4, #00C1h                		D7 00 8A 00 	EXTS    SEG(8Ah), #0001h           		F7 F8 05 80 	MOVB    [8007h], RL4               ;Line: 5	........
255 times. If you have more than 1 array then more times... .

This code is not very optimised, it is consuming a large amount of code memory (1 array item needs 12 bytes of code memory).
Does exist any possibility to create this array directly in program memory segment (in flash - any pragma)?  Next step is to create one small loop to copy data from flash to ram.

Thans
Jan

The generated code belongs to initialization section executed only once. Therefore intensive optimization in it is not important for the program speed.

If you have few memory and really need to optimize code by size then you may try the next trick. I used it for 8051 system with tiny memory. 

1) You can declare string instead of BYTE array. For example: 
str_auchCRChi_exp: STRING[0..255] := '$00, $C1...';  
It have to generate compact string in code memory with compact mem copy function for initialization.

2) There are 2 methods to use a string like an rray. A) Declare both the string and the array on the same address in 'M' memory; B) Make pointer to the array and set it to ADR of the string. 

Regards  

__________________IP_

