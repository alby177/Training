In our App, Hard-Real-Time is much more than essential ... it's critical!In our case Raspbian 4.4.50-rt47 (both "Jessie" Desktop and Lite) or 4.9.47-rt37 ("Stretch") are not so easy to obtain and many times, when the new RT-SD image has been reached, it hungs! That means to re-start from zero and re-load again CoDeSys-control again and again.Furthermore, the required Bluetooth use, makes it even much harder for obtaining the RT images (and when RT is patched, BT has erratic behavior). Our scenario when implementing new perforances is highly frustrating most of the time. But, even so, we persevere in the attempt for its imperative need.Nowadays, we must check our RPi3+CODESYS App during much more than 2 hours and CoDeSys-Licence should be implemented but... the question is:Could you please teach us how to implement (or re-init) CoDeSys-Licence in our new SD images in the faster way?   We'll have two RPi3-B for trials, we understand we'd need two licences, isn't it?Thanking you in advance for your quick reply, BR

Hi,yes if you activate the license on the runtime key, (https://store.codesys.com/accessories/c ... mpakt.html)then it is independet from your sd-installation. (the Pi which has plugged the USB Key is licensed)The other option is use the softlicense and when a reinstall is needed just re-activate the CMLicenseNew.WibuCmRaU again.Sure 2 Pi's 2 licenses are needed. (You see in the faqs here in the forum where you need to save this license file after activation)BREdwin

Thanks a lot Edwin.So, I undertood that you recommend better, to buy as many licenses as needed in https://store.codesys.com/codesys-contr ... pi-sl.html (in our case just 2 for trials)and one only USB-dongle at  https://store.codesys.com/accessories/c ... mpakt.htmlIs it the best way for countinous SD-image re-generation? (Including on it the CoDeSys Control of course)2 simple questions more please:1. USB-dongle can be a 32Gbytes pen-drive or it must be yours?2. Do you know where could we find information with some successfull RT-Raspbian project please? (We have obtained it but we still have problems with the Bluetooth UART mode that it still hung after a sort while).Thanking you for your time again, BRAlbert

Hi Albert,Quote:1. USB-dongle can be a 32Gbytes pen-drive or it must be yours?yes it must be our runtime stickQuote:2. Do you know where could we find information with some successfull RT-Raspbian project please? (We have obtained it but we still have problems with the Bluetooth UART mode that it still hung after a sort while).hm.. not really I would give this "Emlid" a ry.. not sure if this is still maintained.What is connected on bluetooth in your application?BREdwin

Hi Edwin,Thanks again for the information.Regarding your kind bluetooth's question:We have a Windows GUI that initially used RS-232C/RS-422 (only full-duplex. Half-duplex as RS-485 is not enough). But with RPi3 we would like wirelessly control. Our RPI-Application is sending continuously its complete status (throughout a C-Structure of around 1 Kbyte refreshed minimum 10 times per second, i.e. 115200 bps) and furthermore the BT channel is used to send programs or backups and so on in both direction at the same time. Of course that the RPi-Application can be easily controlled through the Windows-GUI in all their aspects.That is the reason of the "full-duplex" need! Note: if we only transmit or we only receive via BT (similar but it is not exactly "half-duplex" as you know), the bluetooth remains in connection all the time and it never hangs.Full-duplex with Raspbian 4.9.47 is working without RT performances. When we have achieved 4.9.47-rt37 is when we have obtained the hunging surprise that the problems with the "full-duplex BT" is hanging suddenly very soon.Hope I have explained correctly and straight-forwardly.BR and TKsAlbert

