I'm trying to map PDOs by adding them to the I/O area in my CANopen Device. The address I am trying to add is 16#2FA. As soon as I type that in the 'Object Index' box, it immediately changes to 16#2000. I'm assuming that '2000' is the minimum index number allowed? Why is this implemented? This seems illogical that CODESys would limit the user from only adding specific address within a range, which seems to be anywhere between 2000-FFFF...Attachment:PDO_ObjectIndex.JPG

Hi,0-0x1FFF is reserved for communication area so reserved for the stack.to map these area does not really make sense from our point of view.Why do you need this?BREdwin

I was given a list of CAN definitions from our vendor (Rexroth) to read or write too. I don't have control of changing these addresses currently and would like to write my program to read CAN values that encompass things such as Engine Temp/Speed, Fuel Level, Currents, Voltage ect from various functions on our machine. The list of addresses I was given are the following. Each address contains 8 bytes and the CAN values take anywhere between 1 byte to 4 bytes to read. 0x2FA0x2FB0x2FC..... (ect)0x3FEIt seems it would make sense that these CAN values are placed in the communication part of the network considering the operator has to be able to calibrate functions on our machine.I'd like to be able to map these PDOs so I can have an EDS file to refer to for future applications if need be and for testing purposes.EDITED FOR CLARIFICATION

Maybe I am thinking about this the wrong way.So if there are already CAN variables defined in the controller or master PLC, then trying to map PDOs would be pointless right? Mapping PDOs would only be for creating brand new CAN variables correct? It wouldn't be the end of the world if I couldn't create an EDS file for later use.

