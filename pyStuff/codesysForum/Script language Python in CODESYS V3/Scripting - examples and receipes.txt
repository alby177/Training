In this thread we would like to collect samples and recipes to show you how to implement more complex procedures in the CoDeSys script language.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

This example is a further development of example 1 from the documentation.Purpose: To read a controller variable out of an external program or a batch file and to print it on the standard display so that it can be evaluated, e.g.:Code:C:\Program Files\3S CoDeSys V3.4 SP3\CoDeSys\Common>start /wait CoDeSys.exe --profile="CoDeSys V3.4 SP3" --noUI --runscript="D:\TestScripts\ReadVariable.py" This is the actual code:Code:# We use the python 3 syntax for printfrom __future__ import print_function   # Our project file is in the data subdirectory of the directory containing# the script, so we calculate the appropriate path.import osscriptdir = os.path.dirname(__file__) # Directory of our script.datadir = os.path.join(scriptdir, "Data") # Enter the subdirectory.projectpath = os.path.join(datadir, "Ampel.project") # And add the project name.# Now, we can open the project.proj = projects.open(projectpath)# We fetch the active application.app = proj.active_application# And create the online application for it.onlineapp = online.create_online_application(app)# We login into the device.onlineapp.login(OnlineChangeOption.Try, True)# We start the application, if necessary.if not onlineapp.application_state == ApplicationState.run:    onlineapp.start()# We let the app do its work for some time...system.delay(1000)# We read the value of the variable we're interested in.value = onlineapp.read_value("PLC_PRG.iVar1")# We output the value to standard output, so our caller can process it.print(value)# Last but not least, we clean up.onlineapp.logout()proj.close()In a windows command window, this looks as follows:Code:C:\Program Files\3S CoDeSys V3.4 SP3\CoDeSys\Common>start /wait CoDeSys --profile="CoDeSys V3.4 SP3" --noUI --runscript="D:\TestScripts\Forum_ReadVariable.py"------ Build started: Application: Device.App -------The application is up to dateBuild: Information: Size of generated code: 6419 bytesBuild: Information: Size of global data: 2594 bytesBuild: Information: Total allocated memory size for code and data: 10997 bytesBuild: Information: Memory area 0 contains  Data, Input, Output, Memory and Code: highest used address: 1048576, largest contiguous memory gap: 1037579 (98 %)Compile complete -- 0 errors, 0 warningsINT#2263C:\Program Files\3S CoDeSys V3.4 SP3\CoDeSys\Common>

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Expecially when one calls Scripts from the command line interpreter, a possibility to pass parameters to the scripts would be handy. As a workaroound, one can use environment variables:Code:from __future__ import print_functionimport osprint("project to open: ", os.environ["PROJECT"])# We assert that the application on the device is already running.proj = projects.open(os.environ["PROJECT"])onlineapp = online.create_online_application(proj.active_application)onlineapp.login(OnlineChangeOption.Try, True)print("variables to read:")for var in os.environ["VARIABLES"].split(","):   print ("    ", var, " = ", onlineapp.read_value(var))This can be launched from a batch file as follows:Code:@echo offSET PROJECT=D:\TestScripts\Data\OnlineTest.projectSET VARIABLES=POU.testint,POU.testoutputstart /wait CoDeSys.exe --profile="CoDeSys V3.4 SP3" --noUI --runscript="D:\TestScripts\Forum_Environment.py"The result looks like this:Code:C:\Program Files\3S CoDeSys V3.4 SP3\CoDeSys\Common>d:\TestScripts\Forum_Environment.batproject to open:  D:\TestScripts\Data\OnlineTest.project------ Build started: Application: CoDeSys_Control_Win_V3.Application -------The application is up to dateBuild: Information: Size of generated code: 6453 bytesBuild: Information: Size of global data: 2606 bytesBuild: Information: Total allocated memory size for code and data: 12505 bytesBuild: Information: Memory area 0 contains  Data, Input, Output, Memory and Code: highest used address: 1048576, largest contiguous memory gap: 1036071 (98 %)Compile complete -- 0 errors, 0 warningsvariables to read:     POU.testint  =  INT#1     POU.testoutput  =  INT#3C:\Program Files\3S CoDeSys V3.4 SP3\CoDeSys\Common>

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Currently, scripts can add devices only via the Device ID. If one doesn't know the ID of a specific device, the following script can help to find out. Just insert the device into the current project, and launch the script:Code:# Prints out all devices and other objects in the currently open project.# We enable the new python 3 print syntaxfrom __future__ import print_function# define the printing functiondef printtree(treeobj, depth=0):    name = treeobj.get_name(False)        if treeobj.is_device:      deviceid = treeobj.get_device_identification()      print("{0} - {1} {2}".format("   "*depth, name, deviceid))       for child in treeobj.get_children(False):        printtree(child, depth+1)for obj in projects.primary.get_children():   printtree(obj)print("--- Script finished. ---")The output looks like this:Code:- CoDeSys_Control_Win_V3 DeviceID(type=4096, Id='0000 0001', Version='3.4.2.0')   - CANbus DeviceID(type=15, Id='181015', Version='3.4.2.0')      - CANopen_Manager DeviceID(type=16, Id='181016', Version='3.4.2.0')--- Script finished. ---And now you know the Device ID you needed.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Some users want to fetch the starting basis for their projects from a Subversion repository.The following example (which is similar to Example 4 in the documentation) creates a new project, and adds a device via PLCOpenXML.Code:# Imports a Device in PLCOpenXML from Subversion via command line svn client.# We enable the new python 3 print syntaxfrom __future__ import print_functionimport sys, os# some variable definitions:SVNEXE = r"C:\Program Files\Subversion\bin\svn.exe"XMLURL = "file:///D:/testrepo/testfolder/TestExport.xml"PROJECT = r"D:\test.project"# clean up any open project:if projects.primary:   projects.primary.close()# Fetch the plcopenxml data from subversion. # The 'with' construct automatically closes the open pipe for us.with os.popen('"' + SVNEXE + '" cat ' + XMLURL, 'r') as pipe:   xmldata = pipe.read()# create a new project:proj = projects.create(PROJECT)# create the import reporterclass Reporter(ImportReporter):   def error(self, message):      system.write_message(Severity.Error, message)   def warning(self, message):      system.write_message(Severity.Warning, message)      def resolve_conflict(self, obj):      return ConflictResolve.Copy      def added(self, obj):      print("added: ", obj)   def replaced(self, obj):      print("replaced: ", obj)   def skipped(self, obj):      print("skipped: ", obj)         @property   def aborting(self):      return False# create the importer instance.reporter = Reporter()      # import the data into the project.proj.import_xml(reporter, xmldata)# and finally save. :-)proj.save()print("--- Script finished. ---")The subversion command line client which is needed for the script above is available for free from several providers. The Subversion Download Page contains links to some of them, the  Cygwin-Project contains another one.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Example snippets: Quickly finding library managers:Find all library managers in the project:Code:objects = proj.get_children(recursive=True)for candidate in objects:    if candidate.is_libman:            print(candidate)The quick way is via list comprehension:Code:managers = [i for i in proj.get_children(True) if i.is_libman]Or via the filter function:Code:managers = filter(lambda i: i.is_libman, proj.get_children(True))If you are only interested in the top level library manager (the one in the POU view), you set recursive to False.Remind that you can also search under a specific device or application if you call get_children on that object instead of the project.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

About the device ID (for automatically inserting devices to your project):Since 3.4.4.0 you can go to the information tab of the device which shows all details like type, ID and version.This makes it much easier than first creating a script to get this information.

TimvH wrote:About the device ID (for automatically inserting devices to your project):Since 3.4.4.0 you can go to the information tab of the device which shows all details like type, ID and version.This makes it much easier than first creating a script to get this information.It seems you're right, but unfortunately, it seems that module IDs are not displayed there.  

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi hi,i was trying to understand the following code: # We use the python 3 syntax for printfrom __future__ import print_function # Our project file is in the data subdirectory of the directory containing# the script, so we calculate the appropriate path.import osscriptdir = os.path.dirname(__file__) # Directory of our script.datadir = os.path.join(scriptdir, "Data") # Enter the subdirectory.projectpath = os.path.join(datadir, "Ampel.project") # And add the project name....................................but I recieve always the following error: NameError: name 'projects' is not definedcould u help please and tell me how to correct it?Thank you

Hi,aoj wrote:i was trying to understand the following code: # We use the python 3 syntax for printfrom __future__ import print_functionThis statement enables the python 3 syntax for print (See the python documentation for more details). I use this syntax so that this script can run with both Python 2 and python 3 without modifications.aoj wrote:# Our project file is in the data subdirectory of the directory containing# the script, so we calculate the appropriate path.import osscriptdir = os.path.dirname(__file__) # Directory of our script.datadir = os.path.join(scriptdir, "Data") # Enter the subdirectory.projectpath = os.path.join(datadir, "Ampel.project") # And add the project name....................................This code calculates the location of the project "Ampel.project" relative to the directory where the script itsself is. It assumes that in the directory containing the script file there is a subdirectory "Data" containing the "Ampel.project" file. This just happens to be the directory layout I used for my internal test scripts.aoj wrote:but I recieve always the following error: NameError: name 'projects' is not definedcould u help please and tell me how to correct it?"projects" is an object imported into the namespace for scripts running in CoDeSys, so it is only available if your script is being started in CoDeSys directly (either via the "Execute Script" menu command or button, or via the "--runscript" command line parameter.)For modules imported by your scripts, this automatic injection does not take place because it would break some modules from the standard library. Simply add "from scriptengine import *" at the top of your module.If you run the script from outside of CoDeSys (for example in the py.exe or ipy.exe interpreters, or an IDE like IDLE or Eric), it won't work, since the codesys environment is not available there.But remember that you can start CoDeSys with the "--runscript" and "--NoUI" parameters to execute python scripts within CoDeSys. (See the documentation for more information.)

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi Hi,thank u for the reply."If you run the script from outside of CoDeSys (for example in the py.exe or ipy.exe interpreters, or an IDE like IDLE or Eric), it won't work, since the codesys environment is not available there."I run the script from IDLE! It means it won't work.I want actually to export a xml-file with python. I have a CoDeSys-Project named Test.project. The first step ist to open this project, which i did with "os.startfile". The second step is to export the xml-file directly from python.Could you give some tips??

Hi,aoj wrote:"If you run the script from outside of CoDeSys (for example in the py.exe or ipy.exe interpreters, or an IDE like IDLE or Eric), it won't work, since the codesys environment is not available there."I run the script from IDLE! It means it won't work.Yes. If you run the script from IDLE, it has no way to access the CoDeSys functionality. The CoDeSys ScriptEngine is not a bunch of ordinary python modules, but a so-called hosted environment, that means the Python interpreter is embedded (and deeply integrated) into the CoDeSys application.aoj wrote:I want actually to export a xml-file with python. I have a CoDeSys-Project named Test.project. The first step ist to open this project, which i did with "os.startfile". The second step is to export the xml-file directly from python.Could you give some tips??Ah, now I see. Your current approach would require the Python script from IDLE to magically recognize the running CoDeSys instance, and then send the commands to that application. Unfortunately, that is not how it currently works. (Note that os.startfile() gives you no way to wait for the application to finish startup and loading, so you would not know when you could actually start to send commands to CoDeSys.)What you currently could do is something like Code:os.system(r'c:\Path\to\CoDeSys.exe --runscript="c:\Path\to\CoDeSysScript.py"') and use an environment variable to pass the name of the CoDeSys project to the script. (See viewtopic.php?p=3803#p3803 for an example of parameter passing via environment variables.) Then, in the CoDeSysScript.py, you can load the project and export the files.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi M.Schaber,if i use the code: os.system(r'c:\Path\to\CoDeSys.exe --runscript="c:\Path\to\CoDeSysScript.py"' and in my CoDeSysScript.py should only open the project Test.project; is it fine to use os.startfile()??? or is there a better command to load the project?Another question: what is the difference between using PLCOpenXML and using the native Export format of CoDeSys?Thanks a lot.

Hi, Aoj,aoj wrote:if i use the code: os.system(r'c:\Path\to\CoDeSys.exe --runscript="c:\Path\to\CoDeSysScript.py"' and in my CoDeSysScript.py should only open the project Test.project; is it fine to use os.startfile()??? or is there a better command to load the project?Inside the CoDeSysScript.py, do not use os.startfile(). That will start a second instance of codesys loading the project, and you still don't have control over that second instance.You need to open the project and do the export from within the CoDeSysScript.py. This may look like:Code:# .. initialization skippedproj = projects.open(PathToProject)device = proj.find('_3S_Testspec_Device')[0]device.export_xml(reporter, ExportFileName, recursive = True)projects.open, and the find and export_xml methods are provided by the CoDeSys environment.aoj wrote:Another question: what is the difference between using PLCOpenXML and using the native Export format of CoDeSys?PLCOpenXML is a standardized format for interchange of data between independent IEC-61131 implementations. Due to that, it is interoperable with other software, but it is not lossless (some aspects may be lost if you export in that format).The native Export format is CoDeSys-specific and less human-readable, but it is lossless.So if you only use those exported objects for re-importing them into CoDeSys later, you use the native format. If you want to process those files using 3rd-party tools, you should use the PLCOpenXML format.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Thank you for the explanation about the difference between the PLCOpenXML and the native export format.in a previous post we talked about the error: "NameError: name 'projects' is not defined".you said i can correct this error by adding "from scriptengine import *" at the top of the module in condition i am starting CoDeSys with the "--runscript".after adding "from scriptengine import *", i get the following error: "ImportError: No module named scriptengine" !!!!

aoj wrote:in a previous post we talked about the error: "NameError: name 'projects' is not defined".you said i can correct this error by adding "from scriptengine import *" at the top of the module in condition i am starting CoDeSys with the "--runscript".It seems that you did misunderstand what I wrote. This works if used inside a python module which is imported by a script running inside CoDeSys, but it is not necessary for the main script itsself (the one whose name you pass to --runscript).aoj wrote:after adding "from scriptengine import *", i get the following error: "ImportError: No module named scriptengine" !!!!Is this in the script running inside CoDeSys, or is it the outer script you use to start CoDeSys?

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

it is the the script, which i use to start CoDeSys. i have to write a script, which it starts a CoDeSys-project and export it as xml.

aoj wrote:it is the the script, which i use to start CoDeSys.Then it is in the wrong script. It should be in the script running inside CoDeSys.aoj wrote:i have to write a script, which it starts a CoDeSys-project and export it as xml.As I told you, you cannot command CoDeSys to export a file as XML "from outside". The way to achieve that goal is to start a CoDeSys instance with the "--runscript" parameter, which makes CoDeSys executing the script you pass via --runscript inside the CoDeSys environment. Then this script running inside CoDeSys can perform the opening of the project and exporting of XML.To rephrase it again in other words: You need two scripts:The 'outer' one starting CoDeSys and commanding it to execute the 'inner' script. (This one may started a python file started by ERIC, or may be a batch-file or whatever else is suitable.)The 'inner' one which runs inside CoDeSys, and performs the actions like opening the project and exporting the objects (that second one must be a CoDeSys IronPython script).All CoDeSys specific commands like projects.open or export_xml are only available to scripts running inside CoDeSys (the 'inner' script). CoDeSys itsself must be executing that script using the built-in IronPython interpreter so that the script has access to all the CoDeSys commands. This concept is called a "Hosted Environment" or an "Embedded Interpreter".

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi,a question about reading a variable with a python script. I get an exception (not a builtin one)when I trying to read a variable (inte) in a program unit, PLC_PRG.  ......# read value of intevalue = onlineapp.read_value("PLC_PRG.inte")   [INFORMATION]   test.py(25): exception (<type 'exceptions.Exception'>,Exception('Invalid expression',), None)The variable is declared:PROGRAM PLC_PRGVAR    inte: INT;END_VAR......int := 42;How come?The whole trace on the script (a modified example script) looks like this:[INFORMATION]   test.py(4): Begin of script[INFORMATION]   test.py(4): while len(projects.all) > 0:            [INFORMATION]   test.py(5):     projects.all[0].close()[INFORMATION]   test.py(8): proj = projects.open("C:\\python\\ObserverPattern.project")[INFORMATION]   test.py(11): app = proj.active_application            [INFORMATION]   test.py(12): onlineapp =online.create_online_application(app)[INFORMATION]   test.py(15): onlineapp.login(OnlineChangeOption.Try,True)            [INFORMATION]   test.py(18): if not onlineapp.application_state ==ApplicationState.run:[INFORMATION]   test.py(19):     onlineapp.start()[INFORMATION]   test.py(22): system.delay(1000)            [INFORMATION]   test.py(25): value =onlineapp.read_value("PLC_PRG.inte")            [INFORMATION]   test.py(25): exception (<type 'exceptions.Exception'>,Exception('Invalid expression',), None)Fredrik

Hi, nfredrik wrote:a question about reading a variable with a python script. I get an exception (not a builtin one)when I trying to read a variable (inte) in a program unit, PLC_PRG.  # read value of intevalue = onlineapp.read_value("PLC_PRG.inte")   As far as I can see, it should work this way. Could you please send me the project archive and script via our support contact, so I can investigate that case further? Thanks!

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hallo M. Schaber,first of all I want to thank you very much for yout help.I have wrote a Python-script, which it execute CoDeSys and call a second scipt. This second script opens A CoDeSys-Project and should export it as XML. But after opening the CoDeSys-Project I got an Error:Attachment:Error.JPGWhat does this Error mean and how can I correct it?

aoj wrote:first of all I want to thank you very much for yout help.You're welcome!aoj wrote:I have wrote a Python-script, which it execute CoDeSys and call a second scipt. This second script opens A CoDeSys-Project and should export it as XML. But after opening the CoDeSys-Project I got an Error:Attachment:Error.JPGWhat does this Error mean and how can I correct it?The error message shows an ArgumentOutOfRangeException. That means that some code accessed some array or list via an index which was out of range.I don't know your script, so it's hard to diagnose the problem, but maybe you did use a construct like Code:device = proj.find('_3S_Testspec_Device')[0] and there is no object with that name. In that case, find returns an empty list, so the index access with [0] fails.You should enable script tracing to find out which line of the code is the one causing the error.Yours, MarkusPS: To enable script tracing, you have three options:Use the --enablescripttracing command line parameterexecute the statement "system.trace = True" in the scriptUse the Script Tracing command in the UI.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

you are right, the error is because of device = proj.find('_3S_Testspec_Device')[0].What for is "_3S_Testspec_Device"?

Hi,aoj wrote:you are right, the error is because of device = proj.find('_3S_Testspec_Device')[0].What for is "_3S_Testspec_Device"?"_3S_Testspec_Device" is the name of the device object I want to find.The find() function returns a list of all objects it found with that name.The reason why find() returns a list is that some objects (like folders) can have the same names, so a find() can return several objects.If you want to export the complete project, you should call the export_xml or export_native methods of the proj object instead.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hali Halo,I am trying now with the following script:[img]from __future__ import print_functionfrom scriptengine import *import sys, io, utilsutils.ensure_tempdir()utils.close_all()system.trace = Trueproj = projects.open(utils.data('.........../Test.project'))class ExportHandler(NativeExportReporter):    def cancel(self, message):           system.write_message(Severity.Error, "Cancelling export: %s" % message)     def warn(self, message):           system.write_message(Severity.Warning, "Warning exporting %s: %s" % message)     def skipped(self, type_name, value_name):           system.write_message(Severity.Information, "Object not exportable: %s value %s" % (type_name, value_name))reporter = ExportHandler()proj.export_native("....../FileName.export", recursive = True, reporter = reporter)[/img]The script open the CoDeSys-Project and show the following error:Quote:Script run caused exception Microsoft.Scripting.ArgumentTypeException: export_native() got an unexpected keyword argument 'recursive'What does this error mean and what could be the solution?

Hi,As the documentation states, the export_native function for projects gets a list of objects as mandatory first parameter, and the destination file as mandatory second parameter, and then the optional (keyword) parameters.So the error message tells you that passing the "recursive" parameter as second parameter to export_native is not allowed, as there need to be the two mandatory parameters first, before the keyword parameters are allowed.HTH,Markus

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

so what could I write as list of objects (first parameter) if I want to export the complete project?

You should be able to use the result of the get_children() method exposed by the project object.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

sorry for taking a lot of your time and effort  but can you please explain what do you mean in other words 

Hi M. Schaber,many thanks for your help. I got it. It is working now Thank you

Hi, Aoj,Sorry for the delay in answering, but I was busy with high priority issues, and had no time to check here in the forum.I'm clad that you could finish the issue yourself.  

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi M. Schaber,is there any command which close CoDeSys after exporting the project?

Hi,You can use system.exit(exitcode). The exitcode is optional, 0 (which means success) is the default.If you just want to terminate the script execution without exitting the platform, call sys.exit() or raise a SystemExitException.HTH,Markus

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

One of our customers works with "prototype projects". They want to slice the prototype projects into single objects, and then use those pieces to re-assemble different projects using scripts.While assisting our customer, the following example script was written. It exports all POUs of the project - each of them into a single file containing just that POU including its children (Actions, Properties etc.), and the parent folders to preserve the folder structure.Other scripts can then use the native import to import those objects under an Application, and the folder structure is recreated.(There is a Bug with native import that can lead to duplicated folders, the fix is scheduled for 3.4 SP4 Patch 2.)Code:# Tests CoDeSys native import/export functionality.from __future__ import print_functionproj = projects.primary# We're interested in POU nodes:POUGuid = Guid("6f9dac99-8de1-4efc-8465-68ac443b7d08")# We collect all POU nodes in that list.pous = []# From the parent node on, we recursively add POU nodes:def CollectPous(node):    if node.type == POUGuid:        pous.append(node)    else:        for child in node.get_children():            CollectPous(child)# Now we collect all the leaf nodes.for node in proj.get_children():    CollectPous(node)# We print everything just to know what's going on.for i in pous:    print("found: ", i.type, i.guid, i.get_name())# And now we export the files.for candidate in pous:    # We create a list of objects to export:    # The object itsself    objects = [candidate]        # And sub-objects (POUs can have actions, properties, ...)    objects.extend(candidate.get_children())        # And the parent folders.    parent = candidate.parent    while ((not parent.is_root) and parent.is_folder):        objects.append(parent)        parent = parent.parent        # Create an unique file name:    filename = "d:\\test\\%s__%s.export" % (candidate.get_name(), candidate.guid)        # print some user information    print("exporting ", len(objects), " objects to: ", filename)        # and actually export the project.    proj.export_native(objects, filename)print ("script finished.")

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

Hi Hi,one more request After exporting the project as XML-File, CoDeSys schows usually a message, that the exporting was successfull (Exportieren erfolgreich abgeschlossen) and waits for the user to press the "OK" button. Is it possible to tell CoDeSys to continue executing the script without waiting for the "OK" button?

Hi,First, we should stop discussing questions in this thread - it was only meant to present examples. We should create a new thread in this forum. Currently, it is not possible to suppress this dialog. We have system.prompt_answers which allows catching and auto-answering of dialogs - however, this currently works only for dialogs which have a so-defined "MessageKey", and it seems that the export dialogs don't offer such MessageKeys.I created issue CDS-25228 in our tracker so this will be fixed eventually.

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbH Inspiring Automation Solutions

HiI'm currently trying to make this script execution work (using the "ScriptEnginePluginAPIReference" and "CoDeSys" help)with the examples given in help files, and seems to work but ran into some unexpected trouble.I wanted to store my project settings and code in PLCopenXML so I made a project, exported everything,using the example script I imported the XML to an empty project (so far it worked) but when I tried to uploadand login I got an error: gateway is not configured.So I wrote a simple script: Code:    def _setGateway(self):        objects = self.proj.get_children(recursive=True)                for dev in objects:            if dev.get_name() == 'Device':                proj_device = dev                gateway_guid = proj_device.get_gateway()        #gateway_guid = '3261a15d-434d-4868-9e1f-1bfa38e92408'        gateway_dev_addr = 'some-hardcoded-value'        proj_device.set_gateway_and_address(gateway_guid, gateway_dev_addr) The script had been checked and its working _under a preset project file_.Problems:1st) when I execute it on a newly (script) created empty project file (after XML import)the gateway GUID is NULL (00000-000-0000-0000), if I set the gateway (manually) in that projectand save the project and than re-execute this script I get a valid GUID.2nd) Even if I hardcode the correct GUID and the correct address (I can see the script setting itt correctly,because I set the addr to a wrong value before) the login command throws me an error that the devicecould not be reached because of connection problems. Again if I set it manually and save the project,login works perfectly.Another major problem that I came across with is the following (either my python knowledge is limited hereor just a simple explanation can solve this), using a python script through command line will only grantthat and only that python script the visibility to codesys supplemented interfaces, once another script is used from that script (using sys.path.append) that script will no longer have the ability to resolve these interface names. - I have a few python script under (let say) C:\python_scripts, these are mostly helpers and classes (e.g. ImporterReporter) - I have another python script under C:\codesys_python\execute.py that should do some testing (or loggin in, etc)execute.py:Code: sys.path.append('C:\\python_scripts') from python_importer import * This line gives me an error/exception that undefined name is -> execute.py line 2 "Unknown name" -> python_scripts\codesys_importer.py line 16 "ImporterReporter" Is there any way to grant access/visibility to script outside the runtime frame?If I copy these scripts near my "execute.py" it works, but I have a reason for separating themso that is not an option.Thank you very much for your help!

Quote:"projects" is an object imported into the namespace for scripts running in CoDeSys, so it is only available if your script is being started in CoDeSys directly (either via the "Execute Script" menu command or button, or via the "--runscript" command line parameter.)Is there any documents or manuals including these 'namespace' in CoDeSys?I can't find it on my PC and internet. Thanks a lot.

Mystic wrote:Quote:"projects" is an object imported into the namespace for scripts running in CoDeSys, so it is only available if your script is being started in CoDeSys directly (either via the "Execute Script" menu command or button, or via the "--runscript" command line parameter.)Is there any documents or manuals including these 'namespace' in CoDeSys?I can't find it on my PC and internet. Thanks a lot.Yes it is documented in the online manual and also 3S CODESYS\CODESYS\Online Help\ScriptEngine.chm

Is there a way to read the device log using the scripting interface?E.g. when an exception happens and I retreive that the application has been stopped but would like to know the reason.

Hi.etamgul wrote:Is there a way to read the device log using the scripting interface?E.g. when an exception happens and I retreive that the application has been stopped but would like to know the reason.Right now, this is not yet possible, but this improvement is already listed in our Jira tracker CDS-31928, so it will be implemented eventually.BRMartin

_________________Check out the CODESYS store: http://store.codesys.com/CODESYS® a trademark of 3S-Smart Software Solutions GmbHInspiring Automation Solutions

In my case onlineapp.application_state does not work properly when script is executed with --noUI switch.I wanted to test that in case of an exception (thrown because the runtime got a wrong UDP packet) the application is stopped,thus I needed a python script to send the proper UDP packets when I realized that using the --noUI switch influences the result of the execution and this was because the onlineapp.application always returned me 'run'.Could somebody confirm this?

